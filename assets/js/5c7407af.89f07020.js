"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[521],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=m(n),u=r,b=d["".concat(s,".").concat(u)]||d[u]||p[u]||o;return n?a.createElement(b,i(i({ref:t},c),{},{components:n})):a.createElement(b,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},19200:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return p}});var a=n(83117),r=n(80102),o=(n(67294),n(3905)),i=["components"],l={id:"linux-test-2",slug:"/linux-test-2",title:"\u7b2c 2 \u7ae0 STREAM \u5185\u5b58\u6d4b\u8bd5",authors:"zhangqf",keywords:["linux","stream"]},s=void 0,m={unversionedId:"linux/test/linux-test-2",id:"linux/test/linux-test-2",title:"\u7b2c 2 \u7ae0 STREAM \u5185\u5b58\u6d4b\u8bd5",description:"STREAM \u8f6f\u4ef6\u662f\u5185\u5b58\u5e26\u5bbd\u6027\u80fd\u6d4b\u8bd5\u7684\u57fa\u51c6\u5de5\u5177\uff0c\u4e5f\u662f\u8861\u91cf\u670d\u52a1\u5668\u5185\u5b58\u6027\u80fd\u6307\u6807\u7684\u901a\u7528\u5de5\u5177\u3002\u968f\u7740\u5904\u7406\u5668\u5904\u7406\u6838\u5fc3\u6570\u91cf\u7684\u589e\u591a\uff0c\u5185\u5b58\u5e26\u5bbd\u5bf9\u4e8e\u63d0\u5347\u6574\u4e2a\u7cfb\u7edf\u6027\u80fd\u8d8a\u53d1\u91cd\u8981\uff0c\u5982\u679c\u67d0\u4e2a\u7cfb\u7edf\u4e0d\u80fd\u8db3\u591f\u8fc5\u901f\u5730\u5c06\u5185\u5b58\u4e2d\u7684\u6570\u636e\u4f20\u8f93\u5230\u5904\u7406\u5668\u5f53\u4e2d\uff0c\u82e5\u5e72\u5904\u7406\u6838\u5fc3\u5c31\u4f1a\u5904\u4e8e\u7b49\u5f85\u6570\u636e\u7684\u95f2\u7f6e\u72b6\u6001\uff0c\u800c\u8fd9\u5176\u4e2d\u6240\u4ea7\u751f\u7684\u95f2\u7f6e\u65f6\u95f4\u4e0d\u4ec5\u4f1a\u964d\u4f4e\u7cfb\u7edf\u7684\u6548\u7387\uff0c\u8fd8\u4f1a\u62b5\u6d88\u591a\u6838\u5fc3\u548c\u9ad8\u4e3b\u9891\u6240\u5e26\u6765\u7684\u6027\u80fd\u63d0\u5347\u3002",source:"@site/docs/linux/test/\u7b2c 2 \u7ae0 STREAM \u5185\u5b58\u6d4b\u8bd5.md",sourceDirName:"linux/test",slug:"/linux-test-2",permalink:"/docs/linux-test-2",draft:!1,tags:[],version:"current",frontMatter:{id:"linux-test-2",slug:"/linux-test-2",title:"\u7b2c 2 \u7ae0 STREAM \u5185\u5b58\u6d4b\u8bd5",authors:"zhangqf",keywords:["linux","stream"]},sidebar:"linux",previous:{title:"\u7b2c 1 \u7ae0 SPEC CPU 2017 \u6d4b\u8bd5",permalink:"/docs/linux-test-1"},next:{title:"\u7b2c 3 \u7ae0 FIO \u78c1\u76d8\u6027\u80fd\u6d4b\u8bd5",permalink:"/docs/linux-test-3"}},c={},p=[{value:"2.1\u3001Stream \u5b89\u88c5",id:"21stream-\u5b89\u88c5",level:2},{value:"2.2\u3001Stream \u4f7f\u7528",id:"22stream-\u4f7f\u7528",level:2},{value:"2.2.1\u3001\u786c\u4ef6\u73af\u5883\u51c6\u5907",id:"221\u786c\u4ef6\u73af\u5883\u51c6\u5907",level:3},{value:"2.2.2\u3001\u5f00\u59cb\u6d4b\u8bd5",id:"222\u5f00\u59cb\u6d4b\u8bd5",level:3},{value:"2.3\u3001\u6d4b\u8bd5\u7ed3\u679c",id:"23\u6d4b\u8bd5\u7ed3\u679c",level:2},{value:"A\u3001\u9644\u5f55",id:"a\u9644\u5f55",level:2},{value:"A1\u3001memtester \u6d4b\u8bd5",id:"a1memtester-\u6d4b\u8bd5",level:3},{value:"A2\u3001bandwidth \u6d4b\u8bd5",id:"a2bandwidth-\u6d4b\u8bd5",level:3},{value:"A3\u3001mbw \u6d4b\u8bd5",id:"a3mbw-\u6d4b\u8bd5",level:3}],d={toc:p};function u(e){var t=e.components,l=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"STREAM \u8f6f\u4ef6\u662f\u5185\u5b58\u5e26\u5bbd\u6027\u80fd\u6d4b\u8bd5\u7684\u57fa\u51c6\u5de5\u5177\uff0c\u4e5f\u662f\u8861\u91cf\u670d\u52a1\u5668\u5185\u5b58\u6027\u80fd\u6307\u6807\u7684\u901a\u7528\u5de5\u5177\u3002\u968f\u7740\u5904\u7406\u5668\u5904\u7406\u6838\u5fc3\u6570\u91cf\u7684\u589e\u591a\uff0c\u5185\u5b58\u5e26\u5bbd\u5bf9\u4e8e\u63d0\u5347\u6574\u4e2a\u7cfb\u7edf\u6027\u80fd\u8d8a\u53d1\u91cd\u8981\uff0c\u5982\u679c\u67d0\u4e2a\u7cfb\u7edf\u4e0d\u80fd\u8db3\u591f\u8fc5\u901f\u5730\u5c06\u5185\u5b58\u4e2d\u7684\u6570\u636e\u4f20\u8f93\u5230\u5904\u7406\u5668\u5f53\u4e2d\uff0c\u82e5\u5e72\u5904\u7406\u6838\u5fc3\u5c31\u4f1a\u5904\u4e8e\u7b49\u5f85\u6570\u636e\u7684\u95f2\u7f6e\u72b6\u6001\uff0c\u800c\u8fd9\u5176\u4e2d\u6240\u4ea7\u751f\u7684\u95f2\u7f6e\u65f6\u95f4\u4e0d\u4ec5\u4f1a\u964d\u4f4e\u7cfb\u7edf\u7684\u6548\u7387\uff0c\u8fd8\u4f1a\u62b5\u6d88\u591a\u6838\u5fc3\u548c\u9ad8\u4e3b\u9891\u6240\u5e26\u6765\u7684\u6027\u80fd\u63d0\u5347\u3002"),(0,o.kt)("p",null,"STREAM \u8f6f\u4ef6\u5177\u6709\u826f\u597d\u7684\u7a7a\u95f4\u5c40\u90e8\u6027\uff0c\u662f\u5bf9\u8f6c\u6362\u68c0\u6d4b\u7f13\u51b2\u533a TLB\uff08Translation Lookaside Buffer\uff09\u53cb\u597d\u3001\u7f13\u5b58\u53cb\u597d\u7684\u4e00\u6b3e\u8f6f\u4ef6\u3002STREAM \u8f6f\u4ef6\u652f\u6301\u590d\u5236\uff08Copy\uff09\u3001\u5c3a\u5ea6\u53d8\u6362\uff08Scale\uff09\u3001\u77e2\u91cf\u6c42\u548c\uff08Add\uff09\u3001\u590d\u5408\u77e2\u91cf\u6c42\u548c\uff08Triad\uff09\u56db\u79cd\u8fd0\u7b97\u65b9\u5f0f\u6d4b\u8bd5\u5185\u5b58\u5e26\u5bbd\u7684\u6027\u80fd\u3002"),(0,o.kt)("h2",{id:"21stream-\u5b89\u88c5"},"2.1\u3001Stream \u5b89\u88c5"),(0,o.kt)("p",null,"\u5b98\u65b9\u6e90\u7801\u5730\u5740\uff1a",(0,o.kt)("a",{parentName:"p",href:"http://www.cs.virginia.edu/stream/FTP/Code/stream.c"},"http://www.cs.virginia.edu/stream/FTP/Code/stream.c")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[root@brinnatt ~]# wget http://www.cs.virginia.edu/stream/FTP/Code/stream.c\n[root@brinnatt ~]# yum install gcc -y\n\n# stream \u7248\u672c 5.9 \u4f7f\u7528\n[root@brinnatt ~]# gcc -O3 -fopenmp -DN=2000000 -DNTIMES=10 stream.c -o stream\n# stream \u7248\u672c 5.10 \u4f7f\u7528\n[root@brinnatt ~]# gcc -O3 -fopenmp -DSTREAM_ARRAY_SIZE=10000000 -DNTIMES=10 stream.c -o stream\n\n[root@brinnatt ~]# ls stream*\nstream  stream.c\n[root@brinnatt ~]#\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"-","O3\uff1a\u6307\u5b9a\u6700\u9ad8\u7f16\u8bd1\u4f18\u5316\u7ea7\u522b\uff0c\u5373 3"),(0,o.kt)("li",{parentName:"ul"},"-","fopenmp\uff1a\u542f\u7528 OpenMP\uff0c\u9002\u5e94\u591a\u5904\u7406\u5668\u73af\u5883\uff0c\u66f4\u80fd\u5f97\u5230\u5185\u5b58\u5e26\u5bbd\u5b9e\u9645\u6700\u5927\u503c\u3002\u5f00\u542f\u540e\uff0c\u7a0b\u5e8f\u9ed8\u8ba4\u8fd0\u884c\u7ebf\u7a0b\u4e3a CPU \u7ebf\u7a0b\u6570"),(0,o.kt)("li",{parentName:"ul"},"-","DN=2000000\uff1a\u6307\u5b9a\u6d4b\u8bd5\u6570\u7ec4 ",(0,o.kt)("inlineCode",{parentName:"li"},"a[]\u3001b[]\u3001c[]")," \u7684\u5927\u5c0f\uff08Array size\uff09\u3002\u8be5\u503c\u5bf9\u6d4b\u8bd5\u7ed3\u679c\u5f71\u54cd\u8f83\u5927\uff085.9 \u7248\u672c\u9ed8\u8ba4\u503c 2000000\uff0c\u82e5 stream.c \u4e3a 5.10 \u7248\u672c\uff0c\u53c2\u6570\u540d\u53d8\u4e3a -DSTREAM","_","ARRAY","_","SIZE\uff0c\u9ed8\u8ba4\u503c 10000000\uff09\u3002",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u6ce8\u610f\uff1a\u5fc5\u987b\u8bbe\u7f6e\u6d4b\u8bd5\u6570\u7ec4\u5927\u5c0f\u8fdc\u5927\u4e8e CPU \u6700\u9ad8\u7ea7\u7f13\u5b58\uff08\u4e00\u822c\u4e3a L3 Cache\uff09\u7684\u5927\u5c0f\uff0c\u5426\u5219\u5c31\u662f\u6d4b\u8bd5 CPU \u7f13\u5b58\u7684\u541e\u5410\u6027\u80fd\uff0c\u800c\u975e\u5185\u5b58\u541e\u5410\u6027\u80fd\u3002"))),(0,o.kt)("li",{parentName:"ul"},"-","DNTIMES=10\uff1a\u6267\u884c\u7684\u6b21\u6570\uff0c\u5e76\u4ece\u8fd9\u4e9b\u7ed3\u679c\u4e2d\u9009\u6700\u4f18\u503c\u3002"),(0,o.kt)("li",{parentName:"ul"},"stream.c\uff1a\u5f85\u7f16\u8bd1\u7684\u6e90\u7801\u6587\u4ef6"),(0,o.kt)("li",{parentName:"ul"},"stream\uff1a\u8f93\u51fa\u7684\u53ef\u6267\u884c\u6587\u4ef6\u540d"),(0,o.kt)("li",{parentName:"ul"},"\u5176\u4ed6\u53c2\u6570\uff1a",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"-","mtune=native -march=native\uff1a\u9488\u5bf9 CPU \u6307\u4ee4\u7684\u4f18\u5316\uff0c-mtune=native\u4f1a\u5728\u5df2\u9009\u6307\u4ee4\u96c6\u7ea6\u675f\u4e0b\u751f\u6210\u672c\u5730\u673a\u5668\u4f18\u5316\u4ee3\u7801\uff1b\u4f7f\u7528-march=native\u5c06\u542f\u7528\u672c\u5730\u673a\u5668\u652f\u6301\u7684\u6240\u6709\u6307\u4ee4\u5b50\u96c6\u3002\u66f4\u591a\u7f16\u8bd1\u5668\u5bf9 CPU \u7684",(0,o.kt)("a",{parentName:"li",href:"http://gcc.gnu.org/onlinedocs/gcc-4.5.3/gcc/i386-and-x86_002d64-Options.html"},"\u4f18\u5316\u53c2\u8003")),(0,o.kt)("li",{parentName:"ul"},"-","mcmodel=medium \uff1a\u5f53\u5355\u4e2a Memory Array Size \u5927\u4e8e 2GB \u65f6\u9700\u8981\u8bbe\u7f6e\u6b64\u53c2\u6570"),(0,o.kt)("li",{parentName:"ul"},"-","DOFFSET=4096 \uff1a\u6570\u7ec4\u7684\u504f\u79fb\uff0c\u4e00\u822c\u53ef\u4ee5\u4e0d\u5b9a\u4e49")))),(0,o.kt)("p",null,"\u63a8\u8350\u8ba1\u7b97\u516c\u5f0f\uff1a",(0,o.kt)("strong",{parentName:"p"},"{\u6700\u9ad8\u7ea7\u7f13\u5b58X MB}\xd71024\xd71024\xd74.1\xd7CPU\u8def\u6570/8"),"\uff0c\u7ed3\u679c\u53d6\u6574\u6570\u3002"),(0,o.kt)("p",null,"\u89e3\u91ca\uff1a\u7531\u4e8e stream.c \u6e90\u7801\u63a8\u8350\u8bbe\u7f6e\u81f3\u5c11 4 \u500d\u6700\u9ad8\u7ea7\u7f13\u5b58\uff0c\u4e14 STREAM","_","ARRAY","_","SIZE \u4e3a double \u7c7b\u578b = 8 Byte\u3002\u6240\u4ee5\u516c\u5f0f\u4e3a\uff1a\u6700\u9ad8\u7ea7\u7f13\u5b58(\u5355\u4f4d\uff1aByte)\xd74.1\u500d\xd7CPU\u8def\u6570/8\u3002"),(0,o.kt)("p",null,"\u4f8b\u5982\uff1a\u6d4b\u8bd5\u673a\u5668\u662f\u53cc\u8def CPU\uff0c\u6700\u9ad8\u7ea7\u7f13\u5b58 32MB\uff0c\u5219\u8ba1\u7b97\u503c\u4e3a 32\xd71024\xd71024\xd74.1\xd72/8\u224834393292\u3002"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"stream",src:n(8746).Z,width:"802",height:"543"})),(0,o.kt)("h2",{id:"22stream-\u4f7f\u7528"},"2.2\u3001Stream \u4f7f\u7528"),(0,o.kt)("h3",{id:"221\u786c\u4ef6\u73af\u5883\u51c6\u5907"},"2.2.1\u3001\u786c\u4ef6\u73af\u5883\u51c6\u5907"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"\u914d\u7f6e"),(0,o.kt)("th",{parentName:"tr",align:null},"x86"),(0,o.kt)("th",{parentName:"tr",align:null},"arm64-single"),(0,o.kt)("th",{parentName:"tr",align:null},"arm64-double"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"CPU"),(0,o.kt)("td",{parentName:"tr",align:null},"X86(Gold 6138)"),(0,o.kt)("td",{parentName:"tr",align:null},"arm64-64core"),(0,o.kt)("td",{parentName:"tr",align:null},"arm64-128core")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"CPU L3 Cache"),(0,o.kt)("td",{parentName:"tr",align:null},"40MB"),(0,o.kt)("td",{parentName:"tr",align:null},"35MB"),(0,o.kt)("td",{parentName:"tr",align:null},"35MB")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"MEM Brand"),(0,o.kt)("td",{parentName:"tr",align:null},"same brand"),(0,o.kt)("td",{parentName:"tr",align:null},"same brand"),(0,o.kt)("td",{parentName:"tr",align:null},"same brand")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"MEM Frequency"),(0,o.kt)("td",{parentName:"tr",align:null},"2666"),(0,o.kt)("td",{parentName:"tr",align:null},"2666"),(0,o.kt)("td",{parentName:"tr",align:null},"2666")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"MEM Size"),(0,o.kt)("td",{parentName:"tr",align:null},"256G"),(0,o.kt)("td",{parentName:"tr",align:null},"256G"),(0,o.kt)("td",{parentName:"tr",align:null},"256G")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"DISK"),(0,o.kt)("td",{parentName:"tr",align:null},"480G(SSD)"),(0,o.kt)("td",{parentName:"tr",align:null},"480G(SSD)"),(0,o.kt)("td",{parentName:"tr",align:null},"480G(SSD)")))),(0,o.kt)("h3",{id:"222\u5f00\u59cb\u6d4b\u8bd5"},"2.2.2\u3001\u5f00\u59cb\u6d4b\u8bd5"),(0,o.kt)("p",null,"\u4f7f\u7528\u547d\u4ee4\u6307\u5b9a\u8fd0\u884c\u7ebf\u7a0b\u4e3a X\uff1aexport OMP","_","NUM","_","THREADS=X"),(0,o.kt)("p",null,"\u5728\u7f16\u8bd1\u8f93\u51fa\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff08stream\uff09\u6240\u5728\u76ee\u5f55\u4e0b\u8fd0\u884c\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[root@brinnatt ~]# export OMP_NUM_THREADS=4\n[root@brinnatt ~]# ./stream \n-------------------------------------------------------------\nSTREAM version $Revision: 5.10 $\n-------------------------------------------------------------\nThis system uses 8 bytes per array element.\n-------------------------------------------------------------\nArray size = 10000000 (elements), Offset = 0 (elements)\nMemory per array = 76.3 MiB (= 0.1 GiB).\nTotal memory required = 228.9 MiB (= 0.2 GiB).\nEach kernel will be executed 10 times.\n The *best* time for each kernel (excluding the first iteration)\n will be used to compute the reported bandwidth.\n-------------------------------------------------------------\nNumber of Threads requested = 4\nNumber of Threads counted = 4\n-------------------------------------------------------------\nYour clock granularity/precision appears to be 1 microseconds.\nEach test below will take on the order of 11300 microseconds.\n   (= 11300 clock ticks)\nIncrease the size of the arrays if this shows that\nyou are not getting at least 20 clock ticks per test.\n-------------------------------------------------------------\nWARNING -- The above is only a rough guideline.\nFor best results, please be sure you know the\nprecision of your system timer.\n-------------------------------------------------------------\nFunction    Best Rate MB/s  Avg time     Min time     Max time\nCopy:            7714.9     0.021200     0.020739     0.021659\nScale:           9229.3     0.018590     0.017336     0.027080\nAdd:             9798.3     0.024819     0.024494     0.025226\nTriad:           9795.6     0.026176     0.024501     0.038130\n-------------------------------------------------------------\nSolution Validates: avg error less than 1.000000e-13 on all three arrays\n-------------------------------------------------------------\n[root@brinnatt ~]#\n")),(0,o.kt)("h2",{id:"23\u6d4b\u8bd5\u7ed3\u679c"},"2.3\u3001\u6d4b\u8bd5\u7ed3\u679c"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"stream data",src:n(47572).Z,width:"836",height:"141"})),(0,o.kt)("h2",{id:"a\u9644\u5f55"},"A\u3001\u9644\u5f55"),(0,o.kt)("h3",{id:"a1memtester-\u6d4b\u8bd5"},"A1\u3001memtester \u6d4b\u8bd5"),(0,o.kt)("p",null,'memtester \u662f Simon Kirby \u5728 1999 \u5e74\u7f16\u5199\u7684\u6d4b\u8bd5\u7a0b\u5e8f\uff08v1 \u7248\uff09\uff0c\u540e\u6765\u7531 Charles Cazabon \u4e00\u76f4\u7ef4\u62a4\u66f4\u65b0\uff08v2\u53ca\u4e4b\u540e\u7248\u672c\uff09\uff0c\u4e3b\u8981\u9762\u5411 Unix-like \u7cfb\u7edf\uff0c\u5b98\u65b9\u4e3b\u9875\u4e0a\u4ecb\u7ecd\u7684\u662f "A userspace utility for testing the memory subsystem for faults."\uff0c\u5176\u5b9e\u5c31\u662f\u4e3a\u4e86\u6d4b\u8bd5\u5185\u5b58\uff08\u4e3b\u8981DDR\uff09\u7684\u8bfb\u5199\u8bbf\u95ee\u53ef\u9760\u6027\uff08\u4ec5\u6b63\u786e\u6027\uff0c\u4e0e\u901f\u5ea6\u6027\u80fd\u65e0\u5173\uff09\uff0c\u8fd9\u662f\u9a8c\u8bc1\u677f\u7ea7\u786c\u4ef6\u8bbe\u5907\u5fc5\u4e0d\u53ef\u5c11\u7684\u4e00\u9879\u6d4b\u8bd5\u3002'),(0,o.kt)("p",null,"\u6574\u4e2a memtester \u6d4b\u8bd5\u7684\u89c6\u89d2\u5c31\u662f\u4ece\u7528\u6237\u7684\u89d2\u5ea6\u6765\u770b\u7684\uff0c\u4ece\u7528\u6237\u89d2\u5ea6\u8bbe\u7acb\u4e0d\u540c\u7684\u6d4b\u8bd5\u573a\u666f\u5373\u6d4b\u8bd5\u7528\u4f8b\uff0c\u7136\u540e\u9488\u5bf9\u6027\u5730\u8fdb\u884c\u529f\u80fd\u6d4b\u8bd5\uff0c\u6ce8\u610f\u662f\u4ece\u7cfb\u7edf\u7ea7\u6765\u6d4b\u8bd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5173\u6ce8\u7684\u4e0d\u5355\u5355\u662f\u5185\u5b58\u9897\u7c92\u4e86\uff0c\u8fd8\u6709\u7cfb\u7edf\u677f\u7ea7\u7684\u8fde\u7ebf\u3001IO \u6027\u80fd\u3001PCB \u7b49\u7b49\u76f8\u5173\u7684\u56e0\u7d20\uff0c\u5728\u8fd9\u4e9b\u56e0\u7d20\u7684\u5f71\u54cd\u4e0b\uff0c\u5185\u5b58\u662f\u5426\u8fd8\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002"),(0,o.kt)("p",null,"\u5b98\u65b9\u5730\u5740\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://pyropus.ca./software/memtester/"},"https://pyropus.ca./software/memtester/")),(0,o.kt)("p",null,"\u4e0b\u8f7d\u5b89\u88c5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[root@brinnatt ~]# wget --no-check-certificate https://pyropus.ca./software/memtester/old-versions/memtester-4.5.1.tar.gz\n[root@brinnatt ~]# tar xf memtester-4.5.1.tar.gz \n[root@brinnatt ~]# cd memtester-4.5.1/\n[root@brinnatt memtester-4.5.1]# ls\nBUGS       COPYING          Makefile         memtester.c   sizes.h   types.h\nCHANGELOG  extra-libs.sh    make-load.sh     memtester.h   tests.c   warn-auto.sh\nconf-cc    find-systype.sh  make-makelib.sh  README        tests.h\nconf-ld    make-compile.sh  memtester.8      README.tests  trycpp.c\n[root@brinnatt memtester-4.5.1]#\n[root@brinnatt memtester-4.5.1]# yum install gcc -y\n[root@brinnatt memtester-4.5.1]# make && make install\n")),(0,o.kt)("p",null,"\u6d4b\u8bd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[root@brinnatt ~]# memtester -h\nmemtester version 4.5.1 (64-bit)\nCopyright (C) 2001-2020 Charles Cazabon.\nLicensed under the GNU General Public License version 2 (only).\n\npagesize is 65536\npagesizemask is 0xffffffffffff0000\nmemtester: invalid option -- 'h'\n\nUsage: memtester [-p physaddrbase [-d device]] <mem>[B|K|M|G] [loops]\n[root@brinnatt ~]#\n[root@brinnatt ~]# memtester 1G 1\nmemtester version 4.5.1 (64-bit)\nCopyright (C) 2001-2020 Charles Cazabon.\nLicensed under the GNU General Public License version 2 (only).\n\npagesize is 65536\npagesizemask is 0xffffffffffff0000\nwant 1024MB (1073741824 bytes)\ngot  1024MB (1073741824 bytes), trying mlock ...locked.\nLoop 1/1:\n  Stuck Address       : ok         \n  Random Value        : ok\n  Compare XOR         : ok\n  Compare SUB         : ok\n  Compare MUL         : ok\n  Compare DIV         : ok\n  Compare OR          : ok\n  Compare AND         : ok\n  Sequential Increment: ok\n  Solid Bits          : ok         \n  Block Sequential    : ok         \n  Checkerboard        : ok         \n  Bit Spread          : ok         \n  Bit Flip            : ok         \n  Walking Ones        : ok         \n  Walking Zeroes      : ok         \n  8-bit Writes        : ok\n  16-bit Writes       : ok\n\nDone.\n[root@brinnatt ~]#\n")),(0,o.kt)("h3",{id:"a2bandwidth-\u6d4b\u8bd5"},"A2\u3001bandwidth \u6d4b\u8bd5"),(0,o.kt)("p",null,"\u5b98\u65b9\u5730\u5740\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://zsmith.co/bandwidth.php"},"https://zsmith.co/bandwidth.php")),(0,o.kt)("p",null,"\u4e0b\u8f7d\u5b89\u88c5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[root@arm64v8 ~]# uname -a\nLinux arm64v8 4.19.90-17.ky10.aarch64 #1 SMP Sun Jun 28 14:27:40 CST 2020 aarch64 aarch64 aarch64 GNU/Linux\n[root@arm64v8 ~]# gcc -v\n\u4f7f\u7528\u5185\u5efa specs\u3002\nCOLLECT_GCC=gcc\nCOLLECT_LTO_WRAPPER=/usr/libexec/gcc/aarch64-linux-gnu/7.3.0/lto-wrapper\n\u76ee\u6807\uff1aaarch64-linux-gnu\n\u914d\u7f6e\u4e3a\uff1a../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-languages=c,c++,objc,obj-c++,fortran,lto --enable-plugin --enable-initfini-array --disable-libgcj --without-isl --without-cloog --enable-gnu-indirect-function --build=aarch64-linux-gnu --with-stage1-ldflags=' -Wl,-z,relro,-z,now' --with-boot-ldflags=' -Wl,-z,relro,-z,now' --with-multilib-list=lp64\n\u7ebf\u7a0b\u6a21\u578b\uff1aposix\ngcc \u7248\u672c 7.3.0 (GCC) \n[root@arm64v8 ~]#\n[root@brinnatt ~]# wget https://zsmith.co/archives/bandwidth-1.11.2.tar.gz\n[root@arm64v8 ~]# tar xf bandwidth-1.11.2.tar.gz \n[root@arm64v8 ~]# cd bandwidth-1.11.2/\n[root@arm64v8 bandwidth-1.11.2]#\n[root@arm64v8 bandwidth-1.11.2]# make\n( cd OOC; make ARMOOC64 )\nmake[1]: \u8fdb\u5165\u76ee\u5f55\u201c/root/bandwidth-1.11.2/OOC\u201d\ngcc -Wall -g -Wno-conditional-type-mismatch  -c ObjectOriented.c Object.c Image.c MutableImage.c Double.c Int.c Array.c MutableArray.c SimpleGraphing.c String.c MutableString.c Font.c FontBuiltin.c Console.c DateTime.c FontPK.c cmr5.c cmr6.c cmr9.c cmr12.c Log.c\nar rvs OOC64.a ObjectOriented.o Object.o Image.o MutableImage.o Double.o Int.o Array.o MutableArray.o SimpleGraphing.o String.o MutableString.o Font.o FontBuiltin.o Console.o DateTime.o FontPK.o cmr5.o cmr6.o cmr9.o cmr12.o Log.o\nar: \u6b63\u5728\u521b\u5efa OOC64.a\na - ObjectOriented.o\na - Object.o\na - Image.o\na - MutableImage.o\na - Double.o\na - Int.o\na - Array.o\na - MutableArray.o\na - SimpleGraphing.o\na - String.o\na - MutableString.o\na - Font.o\na - FontBuiltin.o\na - Console.o\na - DateTime.o\na - FontPK.o\na - cmr5.o\na - cmr6.o\na - cmr9.o\na - cmr12.o\na - Log.o\nmake[1]: \u79bb\u5f00\u76ee\u5f55\u201c/root/bandwidth-1.11.2/OOC\u201d\nas -march=armv8-a routines-arm-64bit.asm -o routines-arm-64bit.o\ngcc -g -Wno-conditional-type-mismatch -c -I ./OOC Testing.c\ngcc -g -Wno-conditional-type-mismatch -c -I ./OOC CPUCharacteristics.c\ngcc routines-arm-64bit.o CPUCharacteristics.o Testing.o main.c  -g -Wno-conditional-type-mismatch OOC/OOC64.a -lm -o bandwidth64\n[root@arm64v8 bandwidth-1.11.2]#\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5b98\u7f51\u4e2d\u6709\u4ecb\u7ecd\uff0cbandwidth v1.10 \u5f00\u59cb\u652f\u6301 aarch64 \u67b6\u6784\uff0c\u4e0d\u8fc7 gcc \u7248\u672c\u592a\u4f4e\u7684\u8bdd\u9700\u8981\u5347\u7ea7\u624d\u80fd\u7f16\u8bd1\u901a\u8fc7\u3002")),(0,o.kt)("p",null,"\u6d4b\u8bd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'[root@arm64v8 bandwidth-1.11.2]# ./bandwidth64 -h\nUsage: bandwidth [--slow] [--fast] [--faster] [--fastest] [--limit] [--title string] [--csv file] [--nice]\n[root@arm64v8 bandwidth-1.11.2]#\n[root@arm64v8 bandwidth-1.11.2]# ./bandwidth64\nThis is bandwidth version 1.11.2\nCopyright (C) 2005-2021 by Zack T Smith.\n\nThis software is covered by the GNU Public License.\nIt is provided AS-IS, use at your own risk.\nSee the file COPYING for more information.\n\nCPU family: ARM 64-bit\n\nSystem: Phytium,FT-2000+/64 GNU/Linux \n\nNotation: B = byte, kB = 1024 B, MB = 1048576 B.\n\nSequential read (64-bit), size = 256 B, loops = 635437056, 30976.2 MB/s\nSequential read (64-bit), size = 512 B, loops = 327155712, 31896.5 MB/s\n......\n64-bit register-to-register transfers per second: 4.26 billion\n128-bit vector register to vector register transfers per second: 0.92 billion\n64-bit register increments per second: 4.27 billion\n64-bit stack value increments per second: 1.60 billion\n\nLibrary: memset 14024.3 MB/s\nLibrary: memcpy 10925.7 MB/s\n\nWrote graph to: bandwidth.bmp\n\nDone.\nAll objects that were allocated were deallocated.\nDeallocating class "Testing"\nDeallocating class "Object"\nDeallocating class "Console"\nDeallocating class "CPUCharacteristics"\nDeallocating class "SimpleGraphing"\nDeallocating class "MutableArray"\nDeallocating class "Font"\nDeallocating class "FontPK"\nDeallocating class "MutableImage"\nDeallocating class "String"\nDeallocating class "Int"\n[root@arm64v8 bandwidth-1.11.2]#\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u6253\u5f00 bandwidth.bmp \u56fe\uff0c\u975e\u5e38\u76f4\u89c2\u3002")),(0,o.kt)("h3",{id:"a3mbw-\u6d4b\u8bd5"},"A3\u3001mbw \u6d4b\u8bd5"),(0,o.kt)("p",null,"mbw \u662f\u4e00\u4e2a\u5185\u5b58\u5e26\u5bbd\u6d4b\u8bd5\u5de5\u5177\uff0c\u901a\u5e38\u7528\u6765\u8bc4\u4f30\u7528\u6237\u5c42\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u5185\u5b58\u62f7\u8d1d\u64cd\u4f5c\u6240\u80fd\u8fbe\u5230\u7684\u5e26\u5bbd\uff0c\u53ef\u6d4b\u8bd5\u5728\u5185\u5b58\u62f7\u8d1d(memcpy)\u3001\u5b57\u7b26\u4e32\u62f7\u8d1d(dumb)\u3001\u548c\u5185\u5b58\u5757\u62f7\u8d1d(mcblock)\u4e09\u79cd\u65b9\u5f0f\u4e0b\u7684\u5185\u5b58\u62f7\u8d1d\u901f\u5ea6\u3002"),(0,o.kt)("p",null,"\u4e0b\u8f7d\u5b89\u88c5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[root@brinnatt ~]# yum install git -y\n[root@brinnatt ~]# git clone https://github.com/raas/mbw.git\nCloning into 'mbw'...\nremote: Enumerating objects: 89, done.\nremote: Counting objects: 100% (4/4), done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 89 (delta 0), reused 1 (delta 0), pack-reused 85\nUnpacking objects: 100% (89/89), done.\n[root@brinnatt ~]# \n[root@brinnatt ~]# cd mbw/\n[root@brinnatt mbw]# make\ncc     mbw.c   -o mbw\n[root@brinnatt mbw]#\n")),(0,o.kt)("p",null,"\u5148\u6e05\u7406\u4e00\u4e0b\u5185\u5b58\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# \u76f8\u5e94\u7684\u5173\u4e8e\u5185\u5b58\u7684\u7ba1\u7406\u65b9\u5f0f\u662f\u5728/proc/sys/vm/drop_chches\u6587\u4ef6\u4e2d\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u5b58\u653e\u7684\u5e76\u4e0d\u662f\u5177\u4f53\u7684\u5185\u5b58\u5185\u5bb9\uff0c\u800c\u662f0-3\u8fd9\u51e0\u4e2a\u6570\u5b57\n[root@arm64v8 mbw]# sync\n[root@arm64v8 mbw]# echo 3 > /proc/sys/vm/drop_caches\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"0\uff1a0 \u662f\u7cfb\u7edf\u9ed8\u8ba4\u503c\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8868\u793a\u4e0d\u91ca\u653e\u5185\u5b58\uff0c\u7531\u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u7ba1\u7406"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[root@arm64v8 mbw]# echo 0 > /proc/sys/vm/drop_caches\n-bash: echo: \u5199\u9519\u8bef: \u65e0\u6548\u7684\u53c2\u6570\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u6ce8\u610f\u8fd9\u91cc\u7684\u6570\u503c\u53ea\u662f\u89e6\u53d1\u76f8\u5e94\u6e05\u7406\u6307\u4ee4\uff0c0 \u53ea\u662f\u9ed8\u8ba4\u503c\uff0c\u7531\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\uff0c\u6ca1\u6709\u76f8\u5e94\u52a8\u4f5c\u6307\u4ee4\u3002"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"1\uff1a\u91ca\u653e\u9875\u7f13\u5b58")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"2\uff1a\u91ca\u653e dentries \u548c inodes")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"3\uff1a\u91ca\u653e\u6240\u6709\u7f13\u5b58"))),(0,o.kt)("p",null,"\u6d4b\u8bd5\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[root@brinnatt mbw]# ./mbw -h\nmbw memory benchmark v1.4, https://github.com/raas/mbw\nUsage: mbw [options] array_size_in_MiB\nOptions:\n    -n: number of runs per test (0 to run forever)\n    -a: Don't display average\n    -t0: memcpy test\n    -t1: dumb (b[i]=a[i] style) test\n    -t2: memcpy test with fixed block size\n    -b <size>: block size in bytes for -t2 (default: 262144)\n    -q: quiet (print statistics only)\n(will then use two arrays, watch out for swapping)\n'Bandwidth' is amount of data copied over the time this operation took.\n\nThe default is to run all tests available.\n[root@brinnatt mbw]#\n[root@arm64v8 mbw]# ./mbw  -n 10 104000\nLong uses 8 bytes. Allocating 2*13631488000 elements = 218103808000 bytes of memory.\nUsing 262144 bytes as blocks for memcpy block copy test.\nGetting down to business... Doing 10 runs per test.\n0   Method: MEMCPY  Elapsed: 33.68961   MiB: 104000.00000   Copy: 3087.005 MiB/s\n1   Method: MEMCPY  Elapsed: 29.87790   MiB: 104000.00000   Copy: 3480.834 MiB/s\n2   Method: MEMCPY  Elapsed: 28.86381   MiB: 104000.00000   Copy: 3603.128 MiB/s\n3   Method: MEMCPY  Elapsed: 28.44751   MiB: 104000.00000   Copy: 3655.856 MiB/s\n4   Method: MEMCPY  Elapsed: 36.57824   MiB: 104000.00000   Copy: 2843.220 MiB/s\n5   Method: MEMCPY  Elapsed: 31.98422   MiB: 104000.00000   Copy: 3251.604 MiB/s\n6   Method: MEMCPY  Elapsed: 32.79171   MiB: 104000.00000   Copy: 3171.533 MiB/s\n7   Method: MEMCPY  Elapsed: 33.92301   MiB: 104000.00000   Copy: 3065.766 MiB/s\n8   Method: MEMCPY  Elapsed: 28.34530   MiB: 104000.00000   Copy: 3669.038 MiB/s\n9   Method: MEMCPY  Elapsed: 29.81308   MiB: 104000.00000   Copy: 3488.402 MiB/s\nAVG Method: MEMCPY  Elapsed: 31.43144   MiB: 104000.00000   Copy: 3308.789 MiB/s\n0   Method: DUMB    Elapsed: 102.77777  MiB: 104000.00000   Copy: 1011.892 MiB/s\n1   Method: DUMB    Elapsed: 102.69878  MiB: 104000.00000   Copy: 1012.670 MiB/s\n2   Method: DUMB    Elapsed: 105.48950  MiB: 104000.00000   Copy: 985.880 MiB/s\n3   Method: DUMB    Elapsed: 102.63031  MiB: 104000.00000   Copy: 1013.346 MiB/s\n4   Method: DUMB    Elapsed: 102.61790  MiB: 104000.00000   Copy: 1013.468 MiB/s\n5   Method: DUMB    Elapsed: 102.47518  MiB: 104000.00000   Copy: 1014.880 MiB/s\n6   Method: DUMB    Elapsed: 102.50904  MiB: 104000.00000   Copy: 1014.545 MiB/s\n7   Method: DUMB    Elapsed: 102.48936  MiB: 104000.00000   Copy: 1014.739 MiB/s\n8   Method: DUMB    Elapsed: 102.60059  MiB: 104000.00000   Copy: 1013.639 MiB/s\n9   Method: DUMB    Elapsed: 105.59219  MiB: 104000.00000   Copy: 984.921 MiB/s\nAVG Method: DUMB    Elapsed: 103.18806  MiB: 104000.00000   Copy: 1007.869 MiB/s\n0   Method: MCBLOCK Elapsed: 31.21951   MiB: 104000.00000   Copy: 3331.250 MiB/s\n1   Method: MCBLOCK Elapsed: 30.37540   MiB: 104000.00000   Copy: 3423.823 MiB/s\n2   Method: MCBLOCK Elapsed: 31.82063   MiB: 104000.00000   Copy: 3268.320 MiB/s\n3   Method: MCBLOCK Elapsed: 29.16408   MiB: 104000.00000   Copy: 3566.031 MiB/s\n4   Method: MCBLOCK Elapsed: 30.10628   MiB: 104000.00000   Copy: 3454.429 MiB/s\n5   Method: MCBLOCK Elapsed: 31.05401   MiB: 104000.00000   Copy: 3349.004 MiB/s\n6   Method: MCBLOCK Elapsed: 31.77311   MiB: 104000.00000   Copy: 3273.208 MiB/s\n7   Method: MCBLOCK Elapsed: 29.97938   MiB: 104000.00000   Copy: 3469.051 MiB/s\n8   Method: MCBLOCK Elapsed: 28.67741   MiB: 104000.00000   Copy: 3626.548 MiB/s\n9   Method: MCBLOCK Elapsed: 33.57305   MiB: 104000.00000   Copy: 3097.723 MiB/s\nAVG Method: MCBLOCK Elapsed: 30.77429   MiB: 104000.00000   Copy: 3379.445 MiB/s\n[root@arm64v8 mbw]#\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"-","n 10\uff1a\u8868\u793a\u8fd0\u884c 10 \u6b21\u3002")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"104000(MB)\uff1a\u8868\u793a\u6d4b\u8bd5\u65f6\u624b\u52a8\u5206\u914d\u7684\u5185\u5b58\u5927\u5c0f\uff0c\u5b9e\u9645 Allocationg \u7684\u5185\u5b58\u5927\u5c0f\u5927\u81f4\u662f\u624b\u52a8\u5206\u914d\u5185\u5b58\u5927\u5c0f\u7684 2 \u500d\uff0c\u6d4b\u8bd5\u65f6\u4ee5\u5b9e\u9645 Allocationg \u7684\u5927\u5c0f\u4e3a\u51c6\u3002"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u6ce8\u610f\uff1a",(0,o.kt)("strong",{parentName:"li"},"Allocating \u7684\u5185\u5b58\u5927\u5c0f\u4e0d\u80fd\u8d85\u8fc7\u7269\u7406\u5185\u5b58\u5927\u5c0f"),"\uff0c\u5426\u5219\u62a5\u9519 ",(0,o.kt)("inlineCode",{parentName:"li"},"Error allocating memory: Cannot allocate memory"),"\u3002"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u7ed3\u679c\u5206\u6790\uff1a\u53ea\u9700\u5173\u6ce8\u5e73\u5747\u503c(AVG)\uff0c\u5185\u5b58\u5206\u914d\u901f\u7387\u8d8a\u5927\uff0c\u6027\u80fd\u8d8a\u597d\uff0c\u4e09\u6b21 AVG \u5206\u522b\u5bf9\u5e94\u5185\u5b58\u62f7\u8d1d\uff0c\u5b57\u7b26\u4e32\u62f7\u8d1d\uff0c\u5185\u5b58\u5757\u62f7\u8d1d\u3002"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"\u6d4b\u8bd5\u5f00\u5934\u4e2d\u7684 Long uses 8 bytes \u6307\u7684\u662f 64 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\u5bfb\u5740\uff0c64 \u4f4d\u5185\u5b58\u5bfb\u5740\u8ddf 32 \u4f4d\u5b8c\u5168\u4e0d\u540c\uff0c\u8bb0\u5fc6\u4e2d 32 \u4f4d\u64cd\u4f5c\u7cfb\u7edf\u5185\u5b58\u5bfb\u5740\u6700\u5927 4G\uff0c\u8fd9\u4e5f\u662f\u4e0a\u4e2a\u4e16\u7eaa\u7684\u4e8b\u4e86\u3002")))))}u.isMDXComponent=!0},47572:function(e,t,n){t.Z=n.p+"assets/images/stream data-d5cefa81a3541ffcfdefc68b339e8a75.png"},8746:function(e,t,n){t.Z=n.p+"assets/images/stream-a24ac34d87fb54ad985c9f80c3e9b3e5.png"}}]);